%% Input params
% https://www.mathworks.com/help/deeplearning/ref/importonnxnetwork.html
% https://www.mathworks.com/help/coder/ug/load-pretrained-networks-for-code-generation.html

% 1) generate onnx model from policy: 
% in policy compression: python convert_policy_from_python_to_matlab_onnx.py --input-policy /home/atagliab/iros22_cleanup/policy_compression/evals/octabee/hover_v0/tmp_dagger_sa_50/0/intermediate_policy_0.pt

% copy the onnx model to matlab

% set the model name and inputs size
%onnx_modelfile = "icra_multi_traj.onnx";
%input_size = 128;
onnx_modelfile = 'octabee_v2_hover_v2_tmp_dagger_sa_50_0_intermediate_policy_0_2022_08_31_10_35_53';
input_size = 310;

%% Load net
net = importONNXNetwork(strcat(onnx_modelfile, '.onnx'), InputDataFormats, "BC", OutputDataFormats, "BC", targetNetwork, "dlnetwork");
%analyzeNetwork(net);
lgraph = layerGraph(net);
lgraph = removeLayers(lgraph,'outputOutput');
net = dlnetwork(lgraph);
%analyzeNetwork(net);
save(strcat(onnx_modelfile,'.mat'), "net");

% %% Generate (portable???) C code: 
% %% TODO: Andrea: skip this
% % https://www.mathworks.com/help/coder/ug/generate-generic-cc-code-for-deep-learning-networks.html
% % using the function: mpcnetFcn
% dlconfig = coder.DeepLearningConfig(TargetLibrary='none');
% cfg = coder.config('lib');
% cfg.TargetLang = 'C';
% cfg.DeepLearningConfig = dlconfig;
% myInput = 0.1*ones(1, input_size);
% codegen -config cfg mpcnetFcn -args {myInput} -fopenmp -report

%% Other unused commands. 
% net = importONNXNetwork(modelfile, targetNetwork='dlnetwork'); 
% create  dummy input
% in = dlarray(0.1*ones(1, input_size),'BC');
% in = 0.1*ones(1, input_size);

% predict to init network 
% net = net.initialize(in);

% %% Generate function
% % https://www.mathworks.com/help/deeplearning/ref/genfunction.html
% genFunction(net,'rtmpcNet.m','MatrixOnly','yes')

% dlnet = coder.loadDeepLearningNetwork('icra_multi_traj_dl.mat');
% in = dlarray(0.1*ones(2, 128),'BC');
% dlA = predict(dlnet, dlIn);
% u_next = extractdata(dlA);

%% Manually define a shallow NN and assign weights based on ONNX model (this avoids nasty C code gen)
% TODO: Andrea: run this part only if the model changes. 
% see: https://www.mathworks.com/help/deeplearning/ug/create-and-train-custom-neural-network-architectures.html

% define network structore - 2 hidden laters wuth relu, one fully connected
layerConnect = [0, 0, 0; 1, 0, 0; 0, 1, 0];
numInputs = 1;
numLayers = 3; 
biasConnect = [1; 1; 1];
inputConnect = [1; 0; 0];
outputConnect = [0, 0, 1];
snet = network(numInputs,numLayers,biasConnect,inputConnect,layerConnect,outputConnect);
snet.trainFcn = feedforwardnet().trainFcn;
% snet.inputs{1}.size = 128;
snet.inputs{1}.exampleInput = rand(input_size, 1);

snet.layers{1}.size = 32;
snet.layers{1}.initFcn = 'initnw';
snet.layers{1}.transferFcn = 'poslin';

snet.layers{2}.size = 32;
snet.layers{2}.initFcn = 'initnw';
snet.layers{2}.transferFcn = 'poslin';

snet.layers{3}.size = 3;
snet.layers{3}.initFcn = 'initnw';
snet.layers{3}.transferFcn = 'purelin';

% this should help to fully configure the internal state of the method
snet = configure(snet, rand(input_size, 1), rand(3, 1));
snet = init(snet);
x = rand(input_size, 1);
t = rand(3, 1);
snet = trainscg(snet,x,t);

% visualize
view(snet)

% Generate NN function & weights
% -> Call this only if network architecture significantly changes (e.g., activation functions)
% and you want to re-generate the network: 
%genFunction(snet, 'rtmpcnn', 'MatrixOnly', 'yes'); 


% Automaticaly updating the weight unfortunately does not work,
% see https://www.mathworks.com/matlabcentral/answers/347609-how-to-manually-modify-weights-in-a-seriesnetwork

% snet_mod = snet.saveobj
% snet = init(snet)
% snet.b{1} = net.Layers(3).Bias;
% snet.IW{1, 1} = net.Layers(3).Weights;
% 
% snet.b{2} = net.Layers(5).Bias;
% snet.LW{2,1} = net.Layers(5).Weights;
% 
% snet.b{3} = net.Layers(7).Bias;
% snet.LW{3,2} = net.Layers(7).Weights;

%% Manually edit the generated function to take as input the params that we define below: 

nnparam.b1 = cast(net.Layers(3).Bias, 'double');
nnparam.IW1_1 = cast(net.Layers(3).Weights, 'double');

nnparam.b2 = cast(net.Layers(5).Bias, 'double');
nnparam.LW2_1 = cast(net.Layers(5).Weights, 'double');

nnparam.b3 = cast(net.Layers(7).Bias, 'double');
nnparam.LW3_2 = cast(net.Layers(7).Weights, 'double');

% verify prediction. Compare with output generated by torch model (based on
% torch model).
rtmpcnn(0.1*ones(input_size, 1), nnparam)
nn_params_name = strcat(onnx_modelfile, '_nnparam.mat');
save(nn_params_name, 'nnparam');

fprintf("Please load: %s \n as input of rtmpcnn.m.\n", nn_params_name);